---
source: crates/tapir-script/compiler/src/compile/ir/optimisations.rs
expression: output
input_file: crates/tapir-script/compiler/src/compile/ir/snapshot_tests/optimisations/integration/division_by_subtraction.tapir
---
----------- before -------------
=======================
fn @toplevel() -> 

---- block 0 ----
temp.17 = int 100
getprop temp.18, 0
temp.19 = divide(temp.17, temp.18)
storeprop temp.19, 0
return 

=======================
fn divide(n.2, d.3) -> int

---- block 2 ----
r.20 = n.2
q.21 = int 0
jmp 0

---- block 0 ----
r.22 = φ(r.20 from 2, r.31 from 5)
d.24 = φ(d.3 from 2, d.24 from 5)
q.27 = φ(q.21 from 2, q.34 from 5)
temp.23 = r.22
temp.25 = d.24
temp.26 = temp.23 < temp.25
conditional_jump temp.26 3 4

---- block 3 ----
temp.28 = q.27
return temp.28

---- block 4 ----
jmp 5

---- block 5 ----
temp.29 = r.22
temp.30 = d.24
r.31 = temp.29 - temp.30
temp.32 = q.27
temp.33 = int 1
q.34 = temp.32 + temp.33
jmp 0


----------- empty_phi -------------
=======================
fn @toplevel() -> 

---- block 0 ----
temp.17 = int 100
getprop temp.18, 0
temp.19 = divide(temp.17, temp.18)
storeprop temp.19, 0
return 

=======================
fn divide(n.2, d.3) -> int

---- block 2 ----
r.20 = n.2
q.21 = int 0
jmp 0

---- block 0 ----
r.22 = φ(r.20 from 2, r.31 from 5)
q.27 = φ(q.21 from 2, q.34 from 5)
temp.23 = r.22
temp.25 = d.3
temp.26 = temp.23 < temp.25
conditional_jump temp.26 3 4

---- block 3 ----
temp.28 = q.27
return temp.28

---- block 4 ----
jmp 5

---- block 5 ----
temp.29 = r.22
temp.30 = d.3
r.31 = temp.29 - temp.30
temp.32 = q.27
temp.33 = int 1
q.34 = temp.32 + temp.33
jmp 0


----------- simplify_blocks -------------
=======================
fn @toplevel() -> 

---- block 0 ----
temp.17 = int 100
getprop temp.18, 0
temp.19 = divide(temp.17, temp.18)
storeprop temp.19, 0
return 

=======================
fn divide(n.2, d.3) -> int

---- block 2 ----
r.20 = n.2
q.21 = int 0
jmp 0

---- block 0 ----
r.22 = φ(r.20 from 2, r.31 from 5)
q.27 = φ(q.21 from 2, q.34 from 5)
temp.23 = r.22
temp.25 = d.3
temp.26 = temp.23 < temp.25
conditional_jump temp.26 3 4

---- block 3 ----
temp.28 = q.27
return temp.28

---- block 4 ----
temp.29 = r.22
temp.30 = d.3
r.31 = temp.29 - temp.30
temp.32 = q.27
temp.33 = int 1
q.34 = temp.32 + temp.33
jmp 5

---- block 5 ----
jmp 0


----------- copy_propagation -------------
=======================
fn @toplevel() -> 

---- block 0 ----
temp.17 = int 100
getprop temp.18, 0
temp.19 = divide(temp.17, temp.18)
storeprop temp.19, 0
return 

=======================
fn divide(n.2, d.3) -> int

---- block 2 ----
r.20 = n.2
q.21 = int 0
jmp 0

---- block 0 ----
r.22 = φ(n.2 from 2, r.31 from 5)
q.27 = φ(q.21 from 2, q.34 from 5)
temp.23 = r.22
temp.25 = d.3
temp.26 = r.22 < d.3
conditional_jump temp.26 3 4

---- block 3 ----
temp.28 = q.27
return q.27

---- block 4 ----
temp.29 = r.22
temp.30 = d.3
r.31 = r.22 - d.3
temp.32 = q.27
temp.33 = int 1
q.34 = q.27 + temp.33
jmp 5

---- block 5 ----
jmp 0


----------- dead_store_elimination -------------
=======================
fn @toplevel() -> 

---- block 0 ----
temp.17 = int 100
getprop temp.18, 0
temp.19 = divide(temp.17, temp.18)
storeprop temp.19, 0
return 

=======================
fn divide(n.2, d.3) -> int

---- block 2 ----
q.21 = int 0
jmp 0

---- block 0 ----
r.22 = φ(n.2 from 2, r.31 from 5)
q.27 = φ(q.21 from 2, q.34 from 5)
temp.26 = r.22 < d.3
conditional_jump temp.26 3 4

---- block 3 ----
return q.27

---- block 4 ----
r.31 = r.22 - d.3
temp.33 = int 1
q.34 = q.27 + temp.33
jmp 5

---- block 5 ----
jmp 0


----------- empty_block -------------
=======================
fn @toplevel() -> 

---- block 0 ----
temp.17 = int 100
getprop temp.18, 0
temp.19 = divide(temp.17, temp.18)
storeprop temp.19, 0
return 

=======================
fn divide(n.2, d.3) -> int

---- block 2 ----
q.21 = int 0
jmp 0

---- block 0 ----
r.22 = φ(n.2 from 2, r.31 from 5, r.31 from 4)
q.27 = φ(q.21 from 2, q.34 from 5, q.34 from 4)
temp.26 = r.22 < d.3
conditional_jump temp.26 3 4

---- block 3 ----
return q.27

---- block 4 ----
r.31 = r.22 - d.3
temp.33 = int 1
q.34 = q.27 + temp.33
jmp 0


----------- inline_small_functions -------------
=======================
fn @toplevel() -> 

---- block 0 ----
temp.17 = int 100
getprop temp.18, 0
jmp 2

---- block 2 ----
q.36 = int 0
jmp 3

---- block 3 ----
r.39 = φ(temp.17 from 2, r.37 from 5)
q.41 = φ(q.36 from 2, q.38 from 5)
temp.40 = r.39 < temp.18
conditional_jump temp.40 4 5

---- block 4 ----
jmp 7

---- block 5 ----
r.37 = r.39 - temp.18
temp.42 = int 1
q.38 = q.41 + temp.42
jmp 3

---- block 7 ----
temp.35 = φ(q.41 from 4)
temp.19 = temp.35
jmp 1

---- block 1 ----
storeprop temp.19, 0
return 

=======================
fn divide(n.2, d.3) -> int

---- block 2 ----
q.21 = int 0
jmp 0

---- block 0 ----
r.22 = φ(n.2 from 2, r.31 from 5, r.31 from 4)
q.27 = φ(q.21 from 2, q.34 from 5, q.34 from 4)
temp.26 = r.22 < d.3
conditional_jump temp.26 3 4

---- block 3 ----
return q.27

---- block 4 ----
r.31 = r.22 - d.3
temp.33 = int 1
q.34 = q.27 + temp.33
jmp 0


----------- remove_unreferenced_functions -------------
=======================
fn @toplevel() -> 

---- block 0 ----
temp.17 = int 100
getprop temp.18, 0
jmp 2

---- block 2 ----
q.36 = int 0
jmp 3

---- block 3 ----
r.39 = φ(temp.17 from 2, r.37 from 5)
q.41 = φ(q.36 from 2, q.38 from 5)
temp.40 = r.39 < temp.18
conditional_jump temp.40 4 5

---- block 4 ----
jmp 7

---- block 5 ----
r.37 = r.39 - temp.18
temp.42 = int 1
q.38 = q.41 + temp.42
jmp 3

---- block 7 ----
temp.35 = φ(q.41 from 4)
temp.19 = temp.35
jmp 1

---- block 1 ----
storeprop temp.19, 0
return 


----------- empty_phi -------------
=======================
fn @toplevel() -> 

---- block 0 ----
temp.17 = int 100
getprop temp.18, 0
jmp 2

---- block 2 ----
q.36 = int 0
jmp 3

---- block 3 ----
r.39 = φ(temp.17 from 2, r.37 from 5)
q.41 = φ(q.36 from 2, q.38 from 5)
temp.40 = r.39 < temp.18
conditional_jump temp.40 4 5

---- block 4 ----
jmp 7

---- block 5 ----
r.37 = r.39 - temp.18
temp.42 = int 1
q.38 = q.41 + temp.42
jmp 3

---- block 7 ----
temp.19 = q.41
jmp 1

---- block 1 ----
storeprop temp.19, 0
return 


----------- simplify_blocks -------------
=======================
fn @toplevel() -> 

---- block 0 ----
temp.17 = int 100
getprop temp.18, 0
q.36 = int 0
jmp 2

---- block 2 ----
jmp 3

---- block 3 ----
r.39 = φ(temp.17 from 2, r.37 from 5)
q.41 = φ(q.36 from 2, q.38 from 5)
temp.40 = r.39 < temp.18
conditional_jump temp.40 4 5

---- block 4 ----
temp.19 = q.41
jmp 7

---- block 5 ----
r.37 = r.39 - temp.18
temp.42 = int 1
q.38 = q.41 + temp.42
jmp 3

---- block 7 ----
storeprop temp.19, 0
jmp 1

---- block 1 ----
return 


----------- copy_propagation -------------
=======================
fn @toplevel() -> 

---- block 0 ----
temp.17 = int 100
getprop temp.18, 0
q.36 = int 0
jmp 2

---- block 2 ----
jmp 3

---- block 3 ----
r.39 = φ(temp.17 from 2, r.37 from 5)
q.41 = φ(q.36 from 2, q.38 from 5)
temp.40 = r.39 < temp.18
conditional_jump temp.40 4 5

---- block 4 ----
temp.19 = q.41
jmp 7

---- block 5 ----
r.37 = r.39 - temp.18
temp.42 = int 1
q.38 = q.41 + temp.42
jmp 3

---- block 7 ----
storeprop q.41, 0
jmp 1

---- block 1 ----
return 


----------- dead_store_elimination -------------
=======================
fn @toplevel() -> 

---- block 0 ----
temp.17 = int 100
getprop temp.18, 0
q.36 = int 0
jmp 2

---- block 2 ----
jmp 3

---- block 3 ----
r.39 = φ(temp.17 from 2, r.37 from 5)
q.41 = φ(q.36 from 2, q.38 from 5)
temp.40 = r.39 < temp.18
conditional_jump temp.40 4 5

---- block 4 ----
jmp 7

---- block 5 ----
r.37 = r.39 - temp.18
temp.42 = int 1
q.38 = q.41 + temp.42
jmp 3

---- block 7 ----
storeprop q.41, 0
jmp 1

---- block 1 ----
return 


----------- empty_block -------------
=======================
fn @toplevel() -> 

---- block 0 ----
temp.17 = int 100
getprop temp.18, 0
q.36 = int 0
jmp 3

---- block 3 ----
r.39 = φ(temp.17 from 2, r.37 from 5, temp.17 from 0)
q.41 = φ(q.36 from 2, q.38 from 5, q.36 from 0)
temp.40 = r.39 < temp.18
conditional_jump temp.40 7 5

---- block 7 ----
storeprop q.41, 0
return 

---- block 5 ----
r.37 = r.39 - temp.18
temp.42 = int 1
q.38 = q.41 + temp.42
jmp 3


----------- unreferenced_blocks_in_phi -------------
=======================
fn @toplevel() -> 

---- block 0 ----
temp.17 = int 100
getprop temp.18, 0
q.36 = int 0
jmp 3

---- block 3 ----
r.39 = φ(r.37 from 5, temp.17 from 0)
q.41 = φ(q.38 from 5, q.36 from 0)
temp.40 = r.39 < temp.18
conditional_jump temp.40 7 5

---- block 7 ----
storeprop q.41, 0
return 

---- block 5 ----
r.37 = r.39 - temp.18
temp.42 = int 1
q.38 = q.41 + temp.42
jmp 3

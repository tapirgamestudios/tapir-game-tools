---
source: crates/tapir-script/compiler/src/compile/ir/optimisations.rs
expression: output
input_file: crates/tapir-script/compiler/src/compile/ir/snapshot_tests/optimisations/integration/division_by_subtraction.tapir
---
----------- before -------------
=======================
fn @toplevel() -> 

---- block 0 ----
temp.17 = int 100
getprop temp.18, 0
temp.19 = divide(temp.17, temp.18)
storeprop temp.19, 0
return 

=======================
fn divide(n.2, d.3) -> int

---- block 2 ----
r.20 = n.2
q.21 = int 0
jmp 0

---- block 0 ----
r.22 = φ(r.20 from 2, r.31 from 5)
d.24 = φ(d.3 from 2, d.24 from 5)
q.27 = φ(q.21 from 2, q.34 from 5)
temp.23 = r.22
temp.25 = d.24
temp.26 = temp.23 < temp.25
conditional_jump temp.26 3 4

---- block 3 ----
temp.28 = q.27
return temp.28

---- block 4 ----
jmp 5

---- block 5 ----
temp.29 = r.22
temp.30 = d.24
r.31 = temp.29 - temp.30
temp.32 = q.27
temp.33 = int 1
q.34 = temp.32 + temp.33
jmp 0


----------- empty_phi -------------
=======================
fn @toplevel() -> 

---- block 0 ----
temp.17 = int 100
getprop temp.18, 0
temp.19 = divide(temp.17, temp.18)
storeprop temp.19, 0
return 

=======================
fn divide(n.2, d.3) -> int

---- block 2 ----
r.20 = n.2
q.21 = int 0
jmp 0

---- block 0 ----
r.22 = φ(r.20 from 2, r.31 from 5)
q.27 = φ(q.21 from 2, q.34 from 5)
temp.23 = r.22
temp.25 = d.3
temp.26 = temp.23 < temp.25
conditional_jump temp.26 3 4

---- block 3 ----
temp.28 = q.27
return temp.28

---- block 4 ----
jmp 5

---- block 5 ----
temp.29 = r.22
temp.30 = d.3
r.31 = temp.29 - temp.30
temp.32 = q.27
temp.33 = int 1
q.34 = temp.32 + temp.33
jmp 0


----------- simplify_blocks -------------
=======================
fn @toplevel() -> 

---- block 0 ----
temp.17 = int 100
getprop temp.18, 0
temp.19 = divide(temp.17, temp.18)
storeprop temp.19, 0
return 

=======================
fn divide(n.2, d.3) -> int

---- block 2 ----
r.20 = n.2
q.21 = int 0
jmp 0

---- block 0 ----
r.22 = φ(r.20 from 2, r.31 from 5)
q.27 = φ(q.21 from 2, q.34 from 5)
temp.23 = r.22
temp.25 = d.3
temp.26 = temp.23 < temp.25
conditional_jump temp.26 3 4

---- block 3 ----
temp.28 = q.27
return temp.28

---- block 4 ----
temp.29 = r.22
temp.30 = d.3
r.31 = temp.29 - temp.30
temp.32 = q.27
temp.33 = int 1
q.34 = temp.32 + temp.33
jmp 5

---- block 5 ----
jmp 0


----------- copy_propagation -------------
=======================
fn @toplevel() -> 

---- block 0 ----
temp.17 = int 100
getprop temp.18, 0
temp.19 = divide(temp.17, temp.18)
storeprop temp.19, 0
return 

=======================
fn divide(n.2, d.3) -> int

---- block 2 ----
r.20 = n.2
q.21 = int 0
jmp 0

---- block 0 ----
r.22 = φ(n.2 from 2, r.31 from 5)
q.27 = φ(q.21 from 2, q.34 from 5)
temp.23 = r.22
temp.25 = d.3
temp.26 = r.22 < d.3
conditional_jump temp.26 3 4

---- block 3 ----
temp.28 = q.27
return q.27

---- block 4 ----
temp.29 = r.22
temp.30 = d.3
r.31 = r.22 - d.3
temp.32 = q.27
temp.33 = int 1
q.34 = q.27 + temp.33
jmp 5

---- block 5 ----
jmp 0


----------- dead_store_elimination -------------
=======================
fn @toplevel() -> 

---- block 0 ----
temp.17 = int 100
getprop temp.18, 0
temp.19 = divide(temp.17, temp.18)
storeprop temp.19, 0
return 

=======================
fn divide(n.2, d.3) -> int

---- block 2 ----
q.21 = int 0
jmp 0

---- block 0 ----
r.22 = φ(n.2 from 2, r.31 from 5)
q.27 = φ(q.21 from 2, q.34 from 5)
temp.26 = r.22 < d.3
conditional_jump temp.26 3 4

---- block 3 ----
return q.27

---- block 4 ----
r.31 = r.22 - d.3
temp.33 = int 1
q.34 = q.27 + temp.33
jmp 5

---- block 5 ----
jmp 0


----------- empty_block -------------
=======================
fn @toplevel() -> 

---- block 0 ----
temp.17 = int 100
getprop temp.18, 0
temp.19 = divide(temp.17, temp.18)
storeprop temp.19, 0
return 

=======================
fn divide(n.2, d.3) -> int

---- block 2 ----
q.21 = int 0
jmp 0

---- block 0 ----
r.22 = φ(n.2 from 2, r.31 from 5, r.31 from 4)
q.27 = φ(q.21 from 2, q.34 from 5, q.34 from 4)
temp.26 = r.22 < d.3
conditional_jump temp.26 3 4

---- block 3 ----
return q.27

---- block 4 ----
r.31 = r.22 - d.3
temp.33 = int 1
q.34 = q.27 + temp.33
jmp 0


----------- unreferenced_blocks_in_phi -------------
=======================
fn @toplevel() -> 

---- block 0 ----
temp.17 = int 100
getprop temp.18, 0
temp.19 = divide(temp.17, temp.18)
storeprop temp.19, 0
return 

=======================
fn divide(n.2, d.3) -> int

---- block 2 ----
q.21 = int 0
jmp 0

---- block 0 ----
r.22 = φ(n.2 from 2, r.31 from 4)
q.27 = φ(q.21 from 2, q.34 from 4)
temp.26 = r.22 < d.3
conditional_jump temp.26 3 4

---- block 3 ----
return q.27

---- block 4 ----
r.31 = r.22 - d.3
temp.33 = int 1
q.34 = q.27 + temp.33
jmp 0
